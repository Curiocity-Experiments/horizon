// prisma/schema.prisma

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("USER")
  accounts      Account[]
  sessions      Session[]
  feedbacks     Feedback[]
  votes         Vote[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Feedback {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  status      String   @default("open")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  votes       Vote[]
  voteCount   Int      @default(0)
  categories  Category[]
}

model Vote {
  id         String   @id @default(cuid())
  type       String   // "upvote" or "downvote"
  createdAt  DateTime @default(now())
  userId     String
  feedbackId String
  user       User     @relation(fields: [userId], references: [id])
  feedback   Feedback @relation(fields: [feedbackId], references: [id])

  @@unique([userId, feedbackId])
}

model Category {
  id        String     @id @default(cuid())
  name      String     @unique
  feedbacks Feedback[]
}